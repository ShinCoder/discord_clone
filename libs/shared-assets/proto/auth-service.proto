syntax="proto3";

package com.auth_service;

import "common.proto";

service AuthServiceAuthModule {
    rpc Register (RegisterDto) returns (RegisterResult) {};
    rpc Login (LoginDto) returns (LoginResult) {};
    rpc Verify (VerifyDto) returns (VerifyResult) {};
    rpc Refresh (RefreshDto) returns (RefreshResult) {};
    rpc Logout (LogoutDto) returns (LogoutResult) {};
    rpc UpdateConnectionStatus (UpdateConnectionStatusDto) returns (UpdateConnectionStatusResult);
}

service AuthServiceAccountModule {
    rpc GetAccount (GetAccountDto) returns (GetAccountResult) {};
    rpc GetAccounts (GetAccountsDto) returns (GetAccountsResult) {};
    rpc AddFriend (AddFriendDto) returns (AddFriendResult) {};
    rpc AcceptFriendRequest (AcceptFriendRequestDto) returns (AcceptFriendRequestResult) {};
    rpc IgnoreFriendRequest (IgnoreFriendRequestDto) returns (IgnoreFriendRequestResult) {};
    rpc RemoveFriend (RemoveFriendDto) returns (RemoveFriendResult) {};
    rpc GetFriendRequests (GetFriendRequestsDto) returns (GetFriendRequestsResult) {};
    rpc BlockUser (BlockUserDto) returns (BlockUserResult) {};
    rpc UnblockUser (UnblockUserDto) returns (UnblockUserResult) {};
    // rpc CreateOrUpdateRelationship (CreateOrUpdateRelationshipDto) returns (CreateOrUpdateRelationshipResult) {};
    // rpc DeleteRelationship (DeleteRelationshipDto) returns (DeleteRelationshipResult) {};
    // rpc GetFriends (GetFriendsDto) returns (GetFriendsResult) {};
    // rpc GetBlocked (GetBlockedDto) returns (GetBlockedResult) {};
}

enum AccountStatus {
    NOT_VERIFIED = 0;
    ACTIVE = 1;
    DISABLED = 2;
}

enum RelationshipStatus {
    PENDING = 0;
    FRIEND = 1;
    BLOCKED = 2;
}

enum ConnectionStatus {
    ONLINE = 0;
    OFFLINE = 1;
}

message RelationshipDto {
    string accountId = 1;
    string targetId = 2;
    RelationshipStatus status = 3;
    string createdAt = 4;
    string updatedAt = 5;
}

message RegisterDto {
    string email = 1;
    string password = 2;
    string username = 3;
    optional string displayName = 4;
    string dateOfBirth = 5; 
}

message RegisterResult {
    message VerifyTokenDto {
        string verifyToken = 1;
    }

    com.common.MessageStatus status = 1;
    optional VerifyTokenDto payload = 2;
}

message LoginDto {
    oneof emailOrPhoneNumber {
        string email = 1;
        string phoneNumber = 2;
    }
    string password = 3;
}

message TokenDto {
    string accessToken = 1;
    string refreshToken = 2;
}

message LoginResult {
    com.common.MessageStatus status = 1;
    optional TokenDto payload = 2;
}

message VerifyDto {
    string id = 1;
}

message VerifyResult {
    com.common.MessageStatus status = 1;
}

message RefreshDto {
    string accountId = 1;
    string refreshToken = 2;
}

message RefreshResult {
    com.common.MessageStatus status = 1;
    optional TokenDto payload = 2;
}

message LogoutDto {
    string accountId = 1;
}

message LogoutResult {
    com.common.MessageStatus status = 1;
}

message AccountDto {
    string id = 1;
    string email = 2;
    string username = 3;
    optional string displayName = 4;
    string dateOfBirth = 5;
    optional string phoneNumber = 6;
    string avatar = 7;
    optional string pronouns = 8;
    optional string about = 9;
    string bannerColor = 10;
    AccountStatus status = 11;
    bool isAdmin = 12;
    string createdAt = 13;
    string updatedAt = 14;
    optional RelationshipDto relationship = 15;
    optional RelationshipDto inRelationshipWith = 16;
    ConnectionStatus connectionStatus = 17;
}

message GetAccountDto {
    optional string id = 1;
    optional string username = 2;
    optional AccountStatus status = 3;
    optional string includeRelationshipWith = 4;
}

message GetAccountResult {
    com.common.MessageStatus status = 1;
    optional AccountDto payload = 2;
}

message AccountsDto {
    repeated AccountDto accounts = 1;
}

message GetAccountsDto {
    optional string haveRelationshipWith = 1;
    optional RelationshipStatus relationshipStatus = 2;
}

message GetAccountsResult {
    com.common.MessageStatus status = 1;
    optional AccountsDto payload = 2;
}

message AddFriendDto {
    string accountId = 1;
    optional string targetId = 2;
    optional string targetUsername = 3;
}

message AddFriendResult {
    com.common.MessageStatus status = 1;
}

message AcceptFriendRequestDto {
    string accountId = 1;
    string targetId = 2;
}

message AcceptFriendRequestResult {
    com.common.MessageStatus status = 1;
}

message IgnoreFriendRequestDto {
    string accountId = 1;
    string targetId = 2;
}

message IgnoreFriendRequestResult {
    com.common.MessageStatus status = 1;
}

message RemoveFriendDto {
    string accountId = 1;
    string targetId = 2;
}

message RemoveFriendResult {
    com.common.MessageStatus status = 1;
}

message BlockUserDto {
    string accountId = 1;
    string targetId = 2;
}

message BlockUserResult {
    com.common.MessageStatus status = 1;
}

message UnblockUserDto {
    string accountId = 1;
    string targetId = 2;
}

message UnblockUserResult {
    com.common.MessageStatus status = 1;
}

// message RelationshipWriteDto {
//     string id = 1;
//     RelationshipStatus status = 2;
// }

// message CreateOrUpdateRelationshipDto {
//     RelationshipWriteDto account = 1;
//     RelationshipWriteDto target = 2;
// }

// message CreateOrUpdateRelationshipResult {
//     com.common.MessageStatus status = 1;
// }

// message DeleteRelationshipDto {
//     string accountId = 1;
//     string targetId = 2; 
// }

// message DeleteRelationshipResult {
//     com.common.MessageStatus status = 1;
// }

// message GetFriendsDto {
//     string accountId = 1;
// }

// message GetFriendsResult {
//     com.common.MessageStatus status = 1;
//     optional AccountsDto payload = 2;
// }

message UpdateConnectionStatusDto {
    string accountId = 1;
    ConnectionStatus status = 2;
}

message UpdateConnectionStatusResult {
    com.common.MessageStatus status = 1;
}

message GetFriendRequestsDto {
    string accountId = 1;
}

message GetFriendRequestsResult {
    message GetFriendRequestPayload {
        repeated AccountDto incomingRequests = 1;
        repeated AccountDto outgoingRequests = 2;
    }

    com.common.MessageStatus status = 1;
    optional GetFriendRequestPayload payload = 2;
}

// message GetBlockedDto {
//     string accountId = 1;
// }

// message GetBlockedResult {
//     com.common.MessageStatus status = 1;
//     optional AccountsDto payload = 2;
// }